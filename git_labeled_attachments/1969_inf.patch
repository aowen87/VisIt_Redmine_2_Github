--- /home/pk/pool/visit-trunk-src/operators/CartographicProjection/avtCartographicProjectionFilter.C	2014-09-17 09:00:48.741073189 +0100
+++ avtCartographicProjectionFilter.C	2014-11-14 15:43:26.118304560 +0000
@@ -35,6 +35,8 @@
 *
 *****************************************************************************/
 
+#include <cmath>
+
 #include <vtkSphericalTransform.h>
 #include <vtkGeoProjection.h>
 #include <vtkGeoTransform.h>
@@ -44,7 +46,7 @@
 #include <vtkRectilinearGrid.h>
 #include <vtkVisItUtility.h>
 #include <DebugStream.h>
-
+// ************************************************************************* //
 // ************************************************************************* //
 //  File: avtCartographicProjectionFilter.C
 // ************************************************************************* //
@@ -217,7 +219,24 @@
   vtkPoints *newPoints = vtkPoints::New(inPts->GetDataType());
   geoXform->TransformPoints(inPts, newPoints);
 
-  newPoints->GetBounds(out_bounds);
+  // compute bounds ignoring infinity
+  out_bounds[0] = out_bounds[1] = out_bounds[2] = 0.0;
+  out_bounds[3] = out_bounds[4] = out_bounds[5] = 0.0;
+  for(int i=0; i < numPts; i++) {
+    newPoints->GetPoint(i, c_pt);
+
+    if (std::isfinite(c_pt[0])) {
+        out_bounds[0] = std::min(out_bounds[0], c_pt[0]);
+        out_bounds[1] = std::max(out_bounds[1], c_pt[0]);
+    }
+    if (std::isfinite(c_pt[1])) {
+        out_bounds[2] = std::min(out_bounds[2], c_pt[1]);
+        out_bounds[3] = std::max(out_bounds[3], c_pt[1]);
+    }
+  }
+
+//  newPoints->GetBounds(out_bounds);
+
   debug4 << "Output Bounds[6] = " << out_bounds[0] << " "  << out_bounds[1] << " " << out_bounds[2] << " " << out_bounds[3] << " " << out_bounds[4] << " " << out_bounds[5] <<  endl;
 
 // rescale coordinates to the original set of longitude and latitude ranges.
