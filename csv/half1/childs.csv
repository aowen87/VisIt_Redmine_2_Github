#,Status,Project,Tracker,Priority,Subject,Assigned to,Category,Target version,Author,Start,Due date,% Done,Estimated time,Created,Updated,Likelihood,Severity,Found in Version,Impact,Expected Use,OS,Support Group,Description
1016,Resolved,VisIt,Bug,Urgent,Log plotting + rectilinear + nodal centering + large range gets mapped wrong.,Kevin Griffin,"",2.9.1,Hank Childs,04/06/2012,"",100,"",04/06/2012 04:53 pm,03/19/2015 11:09 pm,2 - Rare,4 - Crash / Wrong Results,2.4.2,"","",All,Any,"This script should reproduce:

OpenDatabase(""~/visit/data/rect2d.silo"")
AddPlot(""Pseudocolor"", ""d"")
pc = PseudocolorAttributes()
pc.minFlag = 1
pc.min = 1e-5
pc.maxFlag = 1
pc.max = 1000
pc.centering = pc.Nodal
pc.scaling = pc.Log
SetPlotOptions(pc)
DrawPlots()


I dug in for a while and the values in the texture coordinates all seem to be relative to linear plotting, with the color table shifted to log form.  When we put in textures on the order of <0.005, then the values all get mapped to the color at the bottom of the color table.  I believe this is because the resolution of the color table is such that most of the colors are being lost.

This does not happen with the vtkOpenGLPolyDataMapper ... if you apply a Clip operator and change the data from rectilinear to polydata, the problem goes away.
Similarly, if you turn off 1D textures, the problem goes away as well.

(This popped up with a real AMR data set ... the contrived example above is just to get an easy reproducer.)

Finally: this is a new problem with the VTK 5.8 update."
1250,Resolved,VisIt,Bug,Normal,Too much data loaded when picking with secondary variables,Hank Childs,"",2.6.1,Hank Childs,11/26/2012,"",0,8.0,11/26/2012 12:04 pm,12/11/2012 06:56 pm,2 - Rare,2 - Minor Irritation,2.5.2,"","",All,DOE/NEAMS,"(1) Make a slice of a mesh from a Nek5000 file.
(1b) Nek5000 uses data selections ... only part of the file is read in (the part that intersects a slice)
(2) Pick
(2b) (everything works great!)
(3) Add a secondary pick variable and pick again
--> it crashes

The crashes comes from running out of memory.  The problem is that the data selection is not sent up when requesting the secondary variable.  So the entire mesh is read in and that is too much memory.  

Looking over the code, the action is in avtPickQuery::ApplyFilters.  It makes a new avtDataRequest which doesn't have the same data selection (for the slice operator).

I tried adding an avtPointSelection, but that also caused a crash ... it was using the point (X, Z, 0) instead of (X, 0, Z) since the Slice's transform wasn't being built into the pick attributes.  And I didn't see how to do an inverse transform.
"
922,Resolved,VisIt,Bug,Normal,Scatter plot can't be picked,Kathleen Biagas,"",2.5,Hank Childs,12/19/2011,"",0,"",12/19/2011 04:46 pm,03/08/2012 11:43 am,3 - Occasional,3 - Major Irritation,2.4.0,"","",All,Any,"Don Pellegrino reported to the users list that pick doesn't work with scatter plot.
I found this to be true with noise.silo, Scatter plot of hardyglobal and shepardglobal.
I debugged a bit.
First, in ViewerQueryManager, there is some logic about whether to do a ""Glyph Pick"".  This logic is missing a clause for the Scatter plot.
Second, in VisWindow.C, there is a method called GlyphPick.  It looks like it does a successful intersection, but it doesn't return a valid pick because it is missing some AVT arrays.
I hit this code:
                        debug5 << ""GlyphPick: Data does not have ""
                               << ""avtOriginalCellsArray or avtOriginaNodesArray.""
                               << endl;
I believe that it did re-execute the pipeline to pull in those arrays.  I believe the failure is that the Scatter plot, which is creating a brand new data set from the old one, is not propagating the arrays along.
So the second part of the problem is hopefully just to modify avtScatterFilter.C.
"
580,Resolved,VisIt,Bug,Urgent,"Plugins can't be loaded if you run out of directories with ""_par"" or ""_ser"" in the name.","","",2.2.1,Hank Childs,02/02/2011,"",0,0.5,02/02/2011 01:17 pm,02/03/2011 04:35 pm,3 - Occasional,5 - Very Serious,2.2.0,"","",All,Any,"If you run a version of VisIt that is in a directory that has _par or _ser in the name, then it can't load plugins.
I believe the problem code is at:
        int suffixLen = (openPlugin.find(""_ser"") != -1 ||
                         openPlugin.find(""_par"") != -1) ? 4 : 0;
in PluginManager.C
It should only be looking for those strings after the last slash.

Note that found in should read 2.2.0, not trunk."
582,Resolved,VisIt,Bug,Urgent,EvalCubicSpline doesn't work for 2.2.0,Cyrus Harrison,"",2.2.1,Hank Childs,02/03/2011,"",0,"",02/03/2011 10:46 am,02/08/2011 11:41 am,4 - Common,5 - Very Serious,2.2.0,"","",All,Any,"EvalCubicSpline has a problem where it can't resolve ""len"" in 2.2.0 and thinks it is a global variable.
This was reported by brian@fluidmotion.us on the user's list.  I was able to reproduce on my Mac.
I reproduced by running the script on visitusers.org:
http://visitusers.org/index.php?title=Visit-tutorial-python-fly

I did some Google searches and nothing jumped out.  I don't understand why it wouldn't recognize this built in function.

I am suggesting a target version of 2.2.1, since this is a regression.  I also scored likelihood and severity high since I personally advertise this function in the tutorial and I think people make use of it."
595,Resolved,VisIt,Bug,Normal,IndexSelect on particle data creates multi-vertices,Kathleen Biagas,"",2.2.1,Hank Childs,02/10/2011,"",0,1.0,02/10/2011 12:09 am,02/22/2011 02:58 pm,2 - Rare,4 - Crash / Wrong Results,2.2.0,"","",All,Any,"Open up noise.silo.
Make a plot of PointVar.
Apply the IndexSelect op.
Apply the Box op.
If you move the box so it contains some vertices, but not others, you get all vertices.
This is b/c the IndexSelect creates a multi-vertex, instead of lots of VTK_VERTEX.  The Box operator (and other ops) don't gracefully deal with multi-vertices.

The IndexSelect operator should be modified to produce one VTK_VERTEX per point.  

I tried doing this and it wasn't the 10 minute job I anticipated.  Not sure what I was doing wrong."
282,Resolved,VisIt,Bug,Normal,xmledit crashes with deleted enums and enablers,Jeremy Meredith,"","",Hank Childs,07/15/2010,"",0,"",07/15/2010 01:52 pm,07/16/2010 10:52 am,2 - Rare,4 - Crash / Wrong Results,2.0.0,"","",All,Any,"Run xmledit on Curve.xml.
Change symbol density to have ""symbol"" as an enabler with value X.
Go to the enums tab and delete the SymbolTypes type.
Save the xml file.  This will cause xmledit to crash.
Looking into the problem, in tools/xml/Attribute.h, we try to call WriteTagAttr for f->enabler->name.  Enabler appears to be bad, maybe a dangling pointer.  The pointer appears to look OK, but try to cerr the name will lead to a crash."
454,Pending,VisIt,Bug,Normal,Expressions with no real variables don't give warning with ChangeActiveVars,"","","",Hank Childs,10/29/2010,"",0,"",10/29/2010 01:20 pm,02/03/2011 01:30 pm,3 - Occasional,2 - Minor Irritation,2.1.0,"","",All,Any,"Open noise.silo.
Make a vector plot of grad.
Go to Controls->Expressions and make a vector variable defined as {1,0,0}.  (This expression has no real variables; it should fail.)
Go to the variables dropdown and change to unnamed1.  It doesn't change, but it doesn't tell you why.  There is no feedback.
If you try to make a plot of unnamed1, it correctly says there are no real variables.
It looks like we lost a check for ChangeActiveVariables."
553,Pending,VisIt,Feature,Normal,Cache results from EEF,"","","",Hank Childs,01/11/2011,"",0,12.0,01/11/2011 03:16 pm,01/13/2011 06:44 pm,"","","",3 - Medium,3 - Occasional,All,Any,"The purpose of this submission is to document what it will take to get the expression evaluator filter (EEF) to cache its results.
As I see it, there are two major questions:
(1) what should be cached?
(2) when should we try to store/fetch arrays in the cache?

As far as (1), my thought is that we should only cache items that are outputted from the EEF.  If we try to cache intermediate objects, we run the risk of blowing the cache.
As far as (2), my thought is that we add logic to the beginning and end of EEF::Execute().  The logic at the beginning will check to see which domains have been loaded for this processor and then check to see if any of the final expressions are available in the cache.  If so, then it needs to create a new pipeline to execute, removing the unnecessarily filters corresponding to the cached expression.  The logic at the end would simply add the produced expressions to the cache.

There are some downsides to the suggestion to #2.  When the EEF modifies the contract, it requests all variables it believes are necessary to construct the expression.  If the expression is actually cached, none of those variables need to be ""loaded"".  I put ""loaded"" in quotes b/c those variables were already read from disk and should be in cache (or else we couldn't have calculated the expression in the first place!).  So I don't view this to be a huge downside, especially because we don't recalculate extents any more.  The reason I think it needs to be done in this manner is that it will be tough to know what is available in the cache before the EEF::Execute ... we need to the load balancer to run and tell us what domains our MPI task should process.  Failing that, we don't know whether the expression is actually calculated on all domains, since that information is distributed over many processors."
587,Developer Review,VisIt,Bug,High,WriteData method doing too much work,"","","",Hank Childs,02/03/2011,"",0,"",02/03/2011 11:33 pm,07/05/2011 09:48 pm,4 - Common,4 - Crash / Wrong Results,2.2.0,"","",All,Any,"I was doing a study where I was ray-casting a 4B cell problem with 64 processors.  I observed that there was a ""Synchronize"" phase at the end that was lasting 6 seconds -- an appreciable amount of the entire time.

I attached with a debugger and found that the entire data set was being serialized and passed around between the processors.  Each processor was sending another a 271MB message in an effort to decide whether or not we should enter scalable rendering mode.

I have two comments:
(1) when we ray cast volume renderer, we shouldn't have to determine if we exceed the SR threshold.
(2) in the normal case (the geometry case), it seems like we should have a phase where we collect only triangle counts before we actually start sending data.

I am marking the Severity as Crash, since I have seen some occasions where we run out of memory and I now think that it is related to this behavior."
590,Pending,VisIt,Bug,Normal,Jitter causes bad images for unstructured grid volume rendering,Hank Childs,"","",Hank Childs,02/07/2011,"",0,"",02/07/2011 05:48 pm,06/10/2011 06:30 pm,3 - Occasional,4 - Crash / Wrong Results,2.2.0,"","",All,Any,"Here's how to generate the data:
- Get the data at: /project/projectdirs/vacet/1TZ
- Upsample using visitconvert to be 512 domains / 4B cells.

Here's how to make the picture:
- run the script attached to this bug report.

And it makes the image attached ... for me on Longhorn and for Christoph on the cloud.

I found that if I disable jittering in avtExtractor.C, it makes the correct picture.  I'm really not sure what is going wrong.

Also, note that I can't reproduce this with two cores on my laptop."
638,Pending,VisIt,Bug,Normal,Crash with SR + transparency + geometry on local host,"","","",Hank Childs,03/01/2011,"",0,"",03/01/2011 11:28 am,03/04/2011 01:03 pm,2 - Rare,5 - Very Serious,2.2.0,"","",All,Any,"I was rendering a large surface on a remote host with SR = always.  And, in that same window, I had a small plot coming from a file on the localhost.
That all worked great.  (In fact, I didn't even think about it ... I did it and it ""just worked"".)

But then I dropped the transparency of the plot on the remote host and the viewer crashed.  This is a tough use case to support, but I would be happy with a warning and no crash."
639,Pending,VisIt,Bug,Normal,SR mode with local geometry crashes after save window,"","","",Hank Childs,03/01/2011,"",0,"",03/01/2011 11:59 am,03/04/2011 01:03 pm,2 - Rare,5 - Very Serious,2.2.0,"","",All,Any,"Open a remote engine and turn SR mode to always and make a plot.
Open a local file and put a plot in the same window.
You now have rendering being merged from two sources (remote images, plus local OpenGL).

Do a SaveWindow.  It works!  The save even says that it is bringing across an image with z-buffer.  Cool!

But: as soon as you change the view, the remote engine crashes.  It appears it wasn't left in a good state."
704,Pending,VisIt,Bug,Normal,Chombo reader does not produce correct ghost type with concave problems.,"","","",Hank Childs,05/11/2011,"",0,"",05/11/2011 02:43 pm,05/17/2011 07:35 pm,2 - Rare,4 - Crash / Wrong Results,2.2.2,"","",All,DOE/SciDAC,"I've written two good emails describing this problem, so I'll attach that here:

My response to the user:
Hi Alex,

I believe your data is correct and VisIt is handling it wrong.

VisIt differentiates between different types of ghost data.  One type is ""ghost cell exterior to the problem"".  Another type is ""duplicated cell"" where the duplicated cell is ghost here, but real somewhere else.  For the former ghost type, faces between the real cell and the ghost cell should be rendered ... it's the exterior of the problem.  For the latter ghost type, faces between the real cell and the ghost cell should not be rendered ... it's a computational boundary, but doesn't represent anything real from the user's perspective.

The problem in this case is that VisIt's CHOMBO reader has too simplistic a test for marking ghost cells as ""exterior to the problem"".  That should be the designation for the cells along the missing octant (the concave portion of the boundary), but they are instead incorrectly getting the ""duplicated cell"" ghost designation.  The simplistic test only checks to see if a cell is outside the logical extents of the problem.  That works fine for non-concave boundaries, but, as you have seen, breaks for concave boundaries.

So: as you suspected, the issue is CHOMBO + VisIt + concave boundaries.

I filed a bug ticket and hope this gets addressed ASAP.  In the interim, I believe it may be worth experimenting with turning off ghost data at the exterior of the problem.  I think that may put the VisIt CHOMBO reader in a different processing mode.

Finally: I think part of what you want to know is whether you are generating a valid file and getting the simulation you want.  FWIW, I spent quite a while looking at the individual patches and I believe you are.


My description to Gunther:
Each patch is a single cell and has 26 surrounding cells.  Some of these cells should be contributing a face to the exterior, but aren't.  My first suspicion was that we had a problem with our ghost nodes hack, but that doesn't appear to be the case.

Alex has ghost data on the exterior of the problem.  And we seem to be, for the most part, handling that gracefully.  The volume is a cube with an octant carved out.  Consider a cell that abuts that octant.  It has a neighbor cell that is in this missing octant.  That cell should have the designation ""ZONE_EXTERIOR_TO_PROBLEM"", but actually has the designation ""DUPLICATION_ZONE_INTERNAL_TO_PROBLEM"".

Looking at the logic in the CHOMBO reader, it has too simplistic of a test:
                                    if (i>=lowProbI[level] && i<=hiProbI[level] &&
                                            j>=lowProbJ[level] && j<=hiProbJ[level] &&
                                            k>=lowProbK[level] && k<=hiProbK[level])
                                    {
                                        ghostCells->InsertNextValue(ghostInternal);
                                    }
                                    else
                                    {
                                        ghostCells->InsertNextValue(ghostExternal);
                                    }

which does not account for concave domains.  "
923,Pending,VisIt,Bug,Normal,Extents calculation in Volume plot not correct for opacity variable,"","","",Hank Childs,12/19/2011,"",0,"",12/19/2011 04:54 pm,01/11/2012 04:44 pm,3 - Occasional,4 - Crash / Wrong Results,2.4.0,"","",All,Any,"If you make a Volume plot and apply the box operator, the extents calculated for the opacity variable can be incorrect.
This is because the extents for the color variable are passed to the avtVolumeRenderer ... but the opacity variable's extents are not passed.
So the volume plot has to go and walk through the data to determine the extents.  The box contains only a subset of the data, meaning the range it calculates is only over that range.
This creates a poor effect for users ... when they apply the Box operator, the opacities effectively change.

And this is not limited to the case where the opacity and scalar variable differ ... the opacity extents are changed even when they are the same.

The work around is to explicitly set the extents in the Volume plot attributes."
1272,Pending,VisIt,Bug,Normal,Indexing bug for Pick with file format readers that set cell numbers,"","","",Hank Childs,12/11/2012,"",0,"",12/11/2012 07:07 pm,12/18/2012 07:03 pm,2 - Rare,4 - Crash / Wrong Results,2.6.0,"","",All,Any,"The code in avtLocateCellQuery has an incorrect assumption.  It assumes that the value of ""avtOriginalCellNumbers"" for a given cell is the index of that cell in the original data set.  So, if zone Z has ""avtOriginalCellNumbers"" value C, then it is assuming that zone Z was C'th entry in the vtkDataSet returned by the file format reader.  This property is true when we auto-generate the avtOriginalCellNumbers array, which is what happens 99% of the time.

The 1% comes because we allow file format readers to populate their own ""avtOriginalCellNumbers"".  For example, a reader may decide that the user wants the cell number for the first entry in the vtkDataSet to be reported as ""10"", not ""0"".  It doesn't happen often, but it could.

This becomes a problem with the logic in avtLocateCellQuery.  It overwrites the cell index with the avtOriginalCellNumber value:
        if (canUseCells && origCells)
        {
            int comp = origCells->GetNumberOfComponents() -1;
            foundElement = (int) origCells->GetComponent(foundCell, comp);
        }

It later uses foundElement as an index into the vtkDataSet, because it sets pickAtts.SetElementNumber with foundElement and then later sets ""pickedZone"" as pickAtts.GetElementNumber.
        GetZoneCoords(ds, pickedZone);
        success = RetrieveNodes(ds, pickedZone);

When we are retrieving values for secondary variable, this could lead to reading past the end of an array or reading the wrong data.

Again, the issue is with file format readers that set up their own array, since their values may not correspond to the index of the cell in the original vtkDataSet.


"
